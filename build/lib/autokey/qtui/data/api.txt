engine.create_abbreviation(folder, description, abbr, contents) DEPRECATED! Use create_phrase() instead, create a Phrase with an abbreviation
engine.create_hotkey(folder, description, modifiers, key, contents) DEPRECATED! Use create_phrase() instead, create a Phrase with a hotkey
engine.create_phrase(folder, description, contents) Create a Phrase in the given Folder, Fully configure it using the optional keyword parameters
engine.get_folder(title) Retrieve a folder by its title
engine.get_macro_arguments() Get the arguments supplied to the current script via its macro
engine.run_script(description) Run an existing script using its description to look it up
engine.set_return_value(val) Store a return value to be used by a phrase macro
engine.get_triggered_abbreviation() Provide the typed abbreviation and trigger character, or (None, None) if not triggered by an abbreviation
keyboard.fake_keypress(key, repeat=1) Fake a keypress
keyboard.press_key(key) Send a key down event
keyboard.release_key(key) Send a key up event
keyboard.send_key(key, repeat=1) Send a keyboard event
keyboard.send_keys(key_string, send_mode=keyboard.SendMode.KEYBOARD) Send a sequence of keys via keyboard events (default) or via clipboard pasting
keyboard.wait_for_keypress(self, key, modifiers=[], timeOut=10.0) Wait for a keypress or key combination
keyboard.SendMode Contains all valid options for the send_mode parameter
keyboard.SendMode.KEYBOARD Type using the keyboard
keyboard.SendMode.CB_CTRL_V Use the clipboard and paste using <Ctrl>+V
keyboard.SendMode.CB_CTRL_SHIFT_V Use the clipboard and paste using <Ctrl>+<Shift>+V
keyboard.SendMode.CB_SHIFT_INSERT Use the clipboard and paste using <Shift>+<Insert>
keyboard.SendMode.SELECTION Use the X11 PRIMARY buffer / mouse selection and Paste using the middle mouse button
mouse.click_absolute(x, y, button) Send a mouse click relative to the screen (absolute)
mouse.click_relative(x, y, button) Send a mouse click relative to the active window
mouse.click_relative_self(x, y, button) Send a mouse click relative to the current mouse position
mouse.wait_for_click(self, button, timeOut=10.0) Wait for a mouse click
clipboard.fill_clipboard(contents) Copy text into the clipboard
clipboard.fill_selection(contents) Copy text into the X selection
clipboard.get_clipboard() Read text from the clipboard
clipboard.get_selection() Read text from the X selection
dialog.info_dialog(title="Information", message="") Show an informational dialog.
dialog.choose_colour(title="Select Colour") Show a Colour Chooser dialog
dialog.choose_directory(title="Select Directory", initialDir="~", rememberAs=None, **kwargs) Show a Directory Chooser dialog
dialog.combo_menu(options, title="Choose an option", message="Choose an option", **kwargs) Show a combobox menu
dialog.input_dialog(title="Enter a value", message="Enter a value", default="", **kwargs) Show an input dialog
dialog.list_menu(options, title="Choose a value", message="Choose a value", default=None, **kwargs) Show a single-selection list menu
dialog.list_menu_multi(options, title="Choose one or more values", message="Choose one or more values", defaults=[], **kwargs) Show a multiple-selection list menu
dialog.open_file(title="Open File", initialDir="~", fileTypes="*|All Files", rememberAs=None, **kwargs) Show an Open File dialog
dialog.password_dialog(title="Enter password", message="Enter password", **kwargs) Show a password input dialog
dialog.save_file(title="Save As", initialDir="~", fileTypes="*|All Files", rememberAs=None, **kwargs) Show a Save As dialog
store.get_value(key) Get a value
store.remove_value(key) Remove a value
store.set_value(key, value) Store a value
system.create_file(fileName, contents="") Create a file with contents
system.exec_command(command, getOutput=True) Execute a shell command
window.activate(title, switchDesktop=False, matchClass=False) Activate the specified window, giving it input focus
window.close(title, matchClass=False) Close the specified window gracefully
window.get_active_class() Get the class of the currently active window
window.get_active_geometry() Get the geometry of the currently active window
window.get_active_title() Get the visible title of the currently active window
window.move_to_desktop(title, deskNum, matchClass=False) Move the specified window to the given desktop
window.close(title, xOrigin=-1, yOrigin=-1, width=-1, height=-1, matchClass=False) Resize and/or move the specified window
window.set_property(title, action, prop, matchClass=False) Set a property on the given window using the specified action
window.switch_desktop(deskNum) Switch to the specified desktop
window.wait_for_exist(title, timeOut=5) Wait for window with the given title to be created
window.wait_for_focus(title, timeOut=5) Wait for window with the given title to have focus
